(require '[clojure.math.numeric-tower :as math])
(math/expt 4 6)
@roster
(browser-repl)
(ns meetapp.core)
@roster
(dissoc (set 1 2 3 4) 1)
(set 1 2 3 4)
(def a (set 1 2 3 4))
a
(dissoc (set [1 2 3 4])))
(dissoc (set [1 2 3 4]) 3))
(dissoc (set [1 2 3 4]) 3)
(dissoc (set [1 2 3 4]) "3")
(disj (set [1 2 3 4]) 3)
(vec [1 2] [3 4])
(def derp (hash-map :one 1 :two 2))
derp
(derp one)
(derp :one)
(browser-repl)
(subvec [] 1)
(into [] nil)
(contains? #{1 2 3} 2)
{:1 "derp"}
(def wat {:1 "derp"}
)
wat
(wat 1)
(wat "derp")
(wat '1)
(wat "1")
(def huh {1 2, 2 3, 3 4}
)
huh
(huh 1)
(huh 2)
(inc nil)
(inc 0)
(if nil "wat" "derp")
(boolean nil)
(boolean 0)
(derp-vect [1 2 3 4])
(def derp-vect [1 2 3 4])
derp-vectr
derp-vect
(derp-vect 0)
(derp-vect nil)
(derp-vect 0)
(derp-vect 2)
(sort derp-vect)
(def derp-set #{:huh :hoh})
derp-set
(sort derp-set)
(sorted-set derp-set)
(sorted-set nil)
(sorted-set [])
(sorted-set_
)
(sorted-set)
(sorted-set :what :hoh :huh)
sorted-set
(def derpset (sorted-set :what :hoh :huh :alex))
derpset
(select identity derpset)
select
(inc nil)
(max 0 (inc nil))
(not 1)
(not nil)
(not 0)
